---
title: "CFB Team Ratings"
subtitle: "**`r params$team`** **`r params$season`**"
editor: source
format: 
  html:
    echo: false
    warning: false
    message: false
    fig-dpi: 300
    self-contained: true
params: 
  season: 2024
  team: Wisconsin
---

```{r}
#| include: false
# packages
library(targets)
library(dplyr)
library(tidyr)
library(ggplot2)
library(quarto)
library(gt)
library(gtExtras)
library(patchwork)

# src code
tar_source("R")

# team info
team_info <- cfbfastR::cfbd_team_info(year = params$season)

# estimates
team_scores = tar_read("team_scores")
team_category_estimates = tar_read("season_team_category_estimates")

```


```{r}
#| include: false
# functions
my_facet_theme = function(size = 12, ...) {
  
  theme(strip.background.y = element_blank(),
        strip.text.y = element_text(colour = 'grey20', size =size),
        ...)
}

find_team_season_score = function(data) {
  
  data |>
    group_by(season, team) |>
    add_season_week() |>
    slice_max(week, n =1) |>
    ungroup()
  
}

normalize_estimate = function(var, scale = 100) {
  
  scaled = (var - min(var)) / (max(var) - min(var))
  
  scaled * scale
  
}

plot_ranking = function(plot, alpha = 0.5, hjust = 1.4, ranking, groups = c("season", "season_week", "type", "metric")) {
  
  rank_data =
    plot$data |>
    add_team_ranks(groups = groups) |>
    filter(rank %in% c(ranking)) |>
    mutate(team = case_when(rank <= 75 ~ paste('top', rank),
                            rank > 75 ~ paste('bottom', 135 - rank)))
  
  plot +
    geom_line(
      data =
        rank_data,
      aes(group = team),
      linetype = 'dashed',
      alpha = alpha
    ) +
    geom_text(
      data =
        rank_data |>
        filter(season_week == min(season_week)),
      aes(y = estimate,
          label = team
      ),
      hjust = hjust,
      size = 2
    )+
    coord_cartesian(clip = "off")
  
}

plot_team_score_by_season = function(data, team, ranking = c(25), hjust = 1.4) {
  
  p = 
    data |>
    find_team_season_score() |>
    select(season, season_type, season_week, team, overall = score) |>
    pivot_longer(cols = c(overall),
                 names_to = c("type"),
                 values_to = c("estimate")) |>
    add_team_ranks() |>
    plot_team_efficiency(teams = team, title = F)+
    ylab("")+
    xlab("Season")+
    my_facet_theme()+
    ylab("")+
    labs(title = paste("Team Rating by Season", team, sep = " - "),
         subtitle = stringr::str_wrap(
           paste("Estimates based on opponent adjusted team efficiency and predicted points per play. Distribution in grey shows all FBS teams. Highlighted line shows", paste0(team, "'s"), "rating among all FBS teams."), 120),
         x = "Season",
         y= "Rating")
  
  p |>
    plot_ranking(ranking = ranking, hjust = hjust)
}

plot_team_estimates_by_season = function(data, team, ranking = 25, vjust = -0.25, hjust = 2.4) {
  
  p = 
    data |>
    group_by(season, team) |>
    slice_max(season_week, n =1) |>
    rename(overall = score) |>
    pivot_longer(cols = c(offense, defense, special),
                 names_to = c("type"),
                 values_to = c("estimate")) |>
    add_team_ranks() |>
    mutate(type = factor(type, levels = c("offense", "defense", "special"))) |>
    # filter(type != 'special') |>
    plot_team_efficiency(team = team, vjust = vjust)+
    ylab("Net Points per Play")+
    xlab("Season")+
    my_facet_theme()
  
  p |>
    plot_ranking(ranking = ranking, hjust = hjust)
}

plot_team_category_by_season = function(data, team, vjust = -0.25) {
  
  p = 
    data |>
    filter(play_category != 'special') |>
    select(season, season_week, week_date, week, play_category, metric, type, team, estimate) |>
    group_by(season, team, play_category, type) |>
    slice_max(season_week, n = 1) |>
    ungroup() |>
    add_season_week() |>
    add_team_ranks(groups = c("season", "season_week", "play_category", "metric", "type")) |>
    plot_team_efficiency(x = 'season', teams = team, point = T, label = T, title = T, vjust = vjust)+
    ggh4x::facet_nested(type + play_category ~.) +
    my_facet_theme()+
    labs(title = paste("Team Efficiency by Play Type", team, sep = " - "),
         subtitle = stringr::str_wrap(
           paste("Team rating indicates expected margin when playing an average FBS opponent. Estimates based on opponent adjusted team efficiency and predicted points per play. Distribution in grey shows all FBS teams. Highlighted line shows", paste0(team, "'s"), "rating among all FBS teams."), 120),
         x = 'Season',
         y = 'Net Points per Play'
    )
  
  p |>
    plot_ranking(groups = c("season", "season_week", "play_category", "metric", "type"),
                 ranking = 25,
                 hjust = 2.4)
  
} 

plot_team_by_season = function(data, team, hjust = 2.5, heights = c(1, 2.5), ...) {
  
  a = 
    team_scores |>
    plot_team_score_by_season(team = team, hjust = hjust)+
    labs(x = NULL,
         title = paste("Team Efficiency by Season", team, sep = " - ")
    )
  
  b = 
    team_scores |>
    plot_team_estimates_by_season(team = team, hjust = hjust, ...)+
    labs(title = NULL,
         subtitle = NULL)
  
  a / b +
    plot_layout(heights = heights)
}

add_gt_formatting = function(tab, table.font.size = 14) {
  
  tab |>
    gt::tab_options(table.font.size = table.font.size) |>
    gt::opt_row_striping(row_striping = F)
}

set_gt_width = function(tab) {
  
  tab |>
    gt::cols_width(
      season ~ px(75),
      team ~ px(100)
    )
}

```

# About

This report displays estimates for **`r params$team`**'s  college football team from 2011 to present. These estimates are based on play by data using an (opponent adjusted) predicted points per play model and a game prediction model.

# Team Rating by Season

How has **`r params$team`** performed since 2011?

I estimate an overall rating for each team based on play by play data from each season. A team's rating indicates their estimated margin of victory against an average FBS opponent. 

```{r}
##| fig-width: 10
team_scores |>
  plot_team_score_by_season(team = params$team, ranking = c(10, 25, 50))
```

A team's overall rating is a function of their offensive, defensive, and special teams ratings, which I estimate for each team in each season.  These ratings are based on expected points - on average, how many points did the team typically generate per play while on offense or defense? 

I additionally estimate a team's performance when passing/rushing on offense, or defending the pass/rush on defense.

::: panel-tabset

## Overall Efficiency

```{r}
# #| fig-width: 10
team_scores |>
  plot_team_estimates_by_season(team = params$team)

```


## Pass/Rush Efficiency

```{r}
team_category_estimates |>
  plot_team_category_by_season(team = params$team)

```

:::

The following (interactive) tables show my estimates at the season level for the selected team, along with their ranking in each category in parentheses.

::: panel-tabset

## Overall Efficiency by Season

```{r}

team_scores |>
  find_team_season_score() |>
  team_efficiency_overall_tbl(team = params$team, overall_domain = c(-30, 40), est_domain = c(-.55, .65)) |>
  gt::opt_interactive(page_size_default = 15) |>
  add_gt_formatting() |>
  gt::tab_spanner(
    columns = c("estimate_offense", "estimate_defense"),
    label = "net points per play"
  ) |>
  set_gt_width()

```


## Pass/Rush Efficiency by Season

```{r}

team_category_estimates |> 
  find_team_season_score() |>
  filter(play_category != 'special') |>
  team_efficiency_category_tbl(team = params$team, domain = c(-.75, .85)) |>
  gt::opt_interactive(page_size_default = 15) |>
  add_gt_formatting() |>
  set_gt_width()
```

:::

# Team Rating by Week

How has a team performed over the course of a season?

I estimate every team's performance after each full week of every season using play by play data from that week and previous weeks, weighting recent plays more heavily than older plays. The resulting estimates are at the weekly level can be used to monitor a team's efficiency during a season.

As before, I estimate an **overall rating** for each team, indicating their estimated margin of victory against an average FBS opponent.

```{r}

plot_team_score_by_week = function(data, team, ranking = c(10, 25, 50)) {
  
  p = 
    data |>
    rename(overall = score) |>
    pivot_longer(
      cols = c(overall, offense, defense, special),
      names_to = c("type"),
      values_to = c("estimate")
    ) |>
    filter(type == 'overall') |>
    add_season_week() |>
    add_team_ranks(groups = c("season", "week", "type", "metric")) |>
    mutate(type = factor(type, levels = c("overall", "offense", "defense", "special"))) |>
    plot_team_efficiency(x = 'week', teams = team, label = F, point = F, line = T)+
    facet_grid(type ~ season, scales = "free_y")+
    scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
    xlab("Season Week")+
    my_facet_theme()
  
  p |>
    plot_ranking(ranking = ranking)+
    ylab("Rating")
  
}

```

::: panel-tabset

## Current Season

```{r}
#| message: false
#| warning: false
team_scores |>
  filter(season == params$season) |>
  plot_team_score_by_week(team = params$team)+
  coord_cartesian(xlim = c(0, 20))+
  scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE)]})

```

## Last 5 Seasons

```{r}
#| message: false
#| warning: false
team_scores |>
  filter(season >= (params$season-6)) |>
  plot_team_score_by_week(team = params$team)

```


## All Seasons

```{r}
#| message: false
#| warning: false
team_scores |>
  plot_team_score_by_week(team = params$team)

```

:::

::: panel-tabset

## Overall Efficiency by Week

```{r}
#| message: false
#| warning: false
team_scores |>
  plot_team_scores(team = params$team, rankings = c(25)) +
  scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
  xlab("Season Week")+
  my_facet_theme()

```

## Pass/Rush Efficiency by Week

```{r}
#| message: false
#| warning: false
team_category_estimates |>
  plot_team_efficiency_by_category_and_week(team = params$team)+
  scale_x_discrete(breaks = function(x){x[c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)]})+
  xlab("Season Week")+
  my_facet_theme()

```

:::

The following tables show my estimates at the weekly level for the selected team from the current season, along with their ranking in each category in parentheses.

::: panel-tabset

## Team Efficiency `r params$season`

```{r}

team_scores |>
  filter(season == params$season) |>
  team_efficiency_overall_tbl(team = params$team,
                              groups = c("season", "season_week", "play_category", "metric", "type"), 
                              overall_domain = c(-30, 40), 
                              est_domain = c(-.55, .65)) |>
  gt::opt_interactive(page_size_default = 15) |>
  add_gt_formatting() |>
  gt::cols_unhide("week") |>
  gt::cols_align(columns = "week", align = c("center")) |>
  gt::cols_width(
    season ~ px(75),
    week ~ px(75),
  ) |>
  set_gt_width()

```

## Pass/Rush Efficiency `r params$season`

```{r}

team_category_estimates |> 
  filter(season == params$season) |>
  add_season_week() |>
  filter(play_category != 'special') |>
  team_efficiency_category_tbl(team = params$team,
                               groups = c("season", "season_week", "play_category", "metric", "type"), 
                               domain = c(-.75, .85)) |>
  gt::opt_interactive(page_size_default = 25) |>
  add_gt_formatting() |>
  gt::cols_unhide("week") |>
  gt::cols_align(columns = "week", align = c("center")) |>
  gt::cols_width(
    season ~ px(75),
    week ~ px(75)
  ) |>
  set_gt_width()
```

:::