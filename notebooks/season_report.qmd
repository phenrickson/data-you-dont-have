---
title: "CFB Team Efficiency and Rankings"
subtitle: "{{< meta params.season >}} Season Report"
editor: source
format:
  html:
    message: false
    echo: false
    warning: false
    number-sections: false
params:
    season: 2024
    week: 21
---

```{r}
#| include: false
# packages
library(targets)
library(dplyr)
library(tidyr)
library(ggplot2)
library(quarto)
library(gt)
library(gtExtras)
library(yardstick)
library(patchwork)
library(cfbplotR)

# set params
# src code
tar_source("R")

add_gt_formatting = function(tbl, ...) {

  tbl |>
    gt::opt_row_striping(row_striping = F) |>
    gt::tab_options(table.font.size = 14,
                    ...)
}

```

```{r}
team_info <- cfbfastR::cfbd_team_info(year = params$season)
team_estimates <- tar_read("season_team_estimates")
team_scores <- tar_read("team_scores")
team_category_estimates <- tar_read("season_team_category_estimates")

join_team_info <- function(data, teams = team_info) {
  data |>
    inner_join(
      teams |>
        adjust_team_names(cols = "school") |>
        select(
          team = school,
          conference,
          abbreviation
        ),
      by = join_by(team)
    )
}

current_scores <-
  team_scores |>
  filter(season == params$season) |>
  add_season_week() |>
  group_by(team) |>
  arrange(season, week) |>
  group_by(team, season, week) |>
  slice_head(n = 1) |>
  ungroup() |>
  group_by(team) |>
  mutate(diff = round(score - dplyr::lag(score, 1), 2)) |>
  ungroup() |>
  filter(week == max(week)) |>
  arrange(desc(season_week), desc(score)) |>
  mutate(rank = rank(-score)) |>
  select(season, week, rank, team, everything()) |>
  join_team_info()

```

# Rankings

The following table displays my current rankings going into **Week {{< meta params.week >}}** based on opponent adjusted estimates of team efficiency to date.

::: {.callout-note collapse="false"}
## About the Table

**Team Score** refers to the team's expected margin of victory against an average FBS team, as estimated by my game prediction model and measures of team efficiency.

**∆ Score** indicates the change in a team's score from the previous week. Positive values indicate my model rated the team higher after the previous week's performance; negative values indicate my model rates the team lower.

**Offensive/Defensive Efficiency** refers to the team's expected points added per play on offense and defense, adjusted for opponent strength.
:::

```{r}
#| column: body-outset-right
team_scores_tbl = function(data) {

  data |>
    mutate(logo = team) |>
    select(season, season_type, season_week, week, rank, logo, team, score, diff, offense, defense, special) |>
    gt_tbl() |>
    gt::cols_hide(
      columns = c(season_type, season_week, week, special)
    ) |>
    gt::fmt_number(
      columns = c(score),
      decimals = 2
    ) |>
    gt::fmt_number(
      columns = c(offense, defense, special),
      decimals = 3
    ) |>
    gt::cols_align(
      columns = -c(team),
      align = "center"
    ) |>
    gt::cols_label(
      season = "Season",
      week = "Week",
      rank = "Rank",
      logo = "Logo",
      team = "Team",
      score = "Team Score",
      diff = "∆ Score",
      offense = "Offense",
      defense = "Defense",
      special = "Special Teams"
    ) |>
    gt::cols_width(
      season ~ px(75),
      week ~ px(75),
      rank ~ px(75),
      logo ~ px(75)
    ) |>
    cfbplotR::gt_fmt_cfb_logo(columns = "logo") |>
    gt::opt_interactive(
      use_compact_mode = T,
      use_filters = T,
      page_size_default = 15
    ) |>
    add_gt_formatting() |>
    gt_est_color(
      columns = c("offense", "defense"),
      domain = c(-.55, .55)
    ) |>
    # gt::cols_merge(
    #   columns = c("score", "diff"),
    #   pattern = "{1} ({2})"
    # ) |>
    gt_est_color(
      columns = "score",
      domain = c(-40, 40)
    ) |>
    gt::data_color(
      columns = c("diff"),
      domain = c(-12, 12),
      palette = rev(my_gt_palette()),
      na_color = 'white'
    ) |>
    gt::tab_spanner(
      columns = c("offense", "defense"),
      label = "Efficiency"
    )

}

current_scores |>
  team_scores_tbl()

```

## Top 25 by Week

How has the top 25 changed over the course of the season?

```{r}

team_rankings_tile = function(data, season = params$season) {

  data |>
    join_team_info() |>
    filter(season == params$season) |>
    pivot_longer(cols = c(score, offense, defense, special),
                 names_to = c("type"),
                 values_to = c("estimate")) |>
    add_team_ranks(groups = c("season", "season_week", "season_type", "type")) |>
    filter(type == 'score') |>
    add_season_week() |>
    filter(rank <= 25) |>
    ggplot(aes(x=week,
               y=factor(rank),
               color = team,
               fill = team,
               group = team,
               label = abbreviation))+
    geom_tile(color = 'white')+
    geom_text(color = 'white', size = 2)+
    cfbplotR::scale_color_cfb()+
    cfbplotR::scale_fill_cfb()+
    coord_cartesian(xlim = c(1, 21))+
    theme_cfb()+
    scale_x_continuous(n.breaks = 20)+
    theme(panel.grid = element_blank(),
          panel.border = element_blank())+
    xlab("Week")+
    ylab("Ranking")+
    scale_y_discrete(limits = rev)+
    labs(title = paste(season, "Team Rankings by Week"),
         subtitle = stringr::str_wrap("Team rankings based on expected margin of victory against average FBS opponent, estimated from opponent adjusted predicted points per play.", 100)
    )

}

team_scores |>
  add_season_week() |>
  filter(week > 0) |>
  team_rankings_tile()

```

## Team Scores

```{r}
#| warning: false
#| message: false

plot_team_scores_by_conference = function(data, conference = 'Big Ten', span = 0.5, lines = c(0)) {

  plot_team_lines = function(data, ylim = c(-30, 30)) {

    data |>
      add_season_week() |>
      ggplot(aes(x=week,
                 y=score,
                 color = team,
                 label = abbreviation))+
      geom_line(stat = 'smooth', method = 'loess', formula = 'y ~ x', span = span)+
      cfbplotR::scale_color_cfb()+
      theme_cfb()+
      # coord_cartesian(ylim = ylim)+
      xlab("Season Week")+
      ylab("Team Score")+
      geom_hline(yintercept = lines, linetype = 'dashed')+
      coord_cartesian(
        #ylim = c(-33, 33),
        xlim = c(-1, 22)
      )

  }

  label_team = function(data, var, size = 3, nudge_x = 1.2) {

    ggrepel::geom_text_repel(
      aes(label = {{var}}),
      fontface = "bold",
      size = size,
      direction = "y",
      nudge_x = nudge_x,
      segment.alpha = .5,
      segment.linetype = "dotted",
      box.padding = .2,
      segment.curvature = -0.1,
      segment.ncp = 3,
      segment.angle = 20,
      segment.size = 0.5

    )
  }

  data |>
    filter(season == params$season) |>
    join_team_info() |>
    inner_join(
      tibble(
        conference = conference
      ), by = join_by(conference)
    ) |>
    add_season_week() |>
    group_by(season, team) |>
    mutate(start_label = case_when(week == min(week) ~ abbreviation),
           end_label = case_when(week == max(week) ~ abbreviation)) |>
    plot_team_lines()+
    label_team(var = end_label, size = 3, nudge_x = 1.1)+
    label_team(var = start_label, size = 2, nudge_x = -0.9)+
    facet_wrap(conference ~.)
}

conferences =
  team_info |>
  distinct(conference) |>
  pull()

conference_plots =
  purrr::map(conferences,
             ~ plot_team_scores_by_conference(team_scores, conference = .x)
  )

names(conference_plots) = conferences

```

How have team scores changed during the season? The following plots display estimated team scores for each week of the season by conference. Click on a conference to view how team scores have changed during the season.

::: {.panel-tabset .nav-pills}
### SEC

```{r}
conference_plots$SEC
```

### Big Ten

```{r}
conference_plots$`Big Ten`
```

### Big 12

```{r}
conference_plots$`Big 12`
```

### ACC

```{r}
conference_plots$ACC
```

### Mountain West

```{r}
conference_plots$`Mountain West`

```

### American Athletic

```{r}
conference_plots$`American Athletic`
```

### Conference USA

```{r}
conference_plots$`Conference USA`

```

### Sun Belt

```{r}
conference_plots$`Sun Belt`
```

### MAC

```{r}
conference_plots$`Mid-American`

```
:::

# Efficiency

My team measures are based around the concept of efficiency, how a team performs on average on a play by play basis. I measure this by estimating a team's expected points added per play on offense and defense, adjusted for opponent strength.

## Offense/Defense

The following plot displays all FBS teams based on their estimated offensive/defensive efficiency for the current season to date.

```{r}

current_scores =
  team_scores |>
  filter(season == params$season) |>
  add_season_week() |>
  filter(week == max(week)) |>
  arrange(desc(season_week), desc(score)) |>
  mutate(rank = rank(-score)) |>
  select(season, week, rank, team, everything()) |>
  inner_join(
    team_info |>
      adjust_team_names(cols = "school") |>
      select(team = school,
             conference,
             abbreviation),
    by = join_by(team)
  )

```

```{r}
plot_team_scores = function(data, season = params$season) {

  data |>
    ggplot(aes(x=offense,
               y=defense,
               color = team,
               label = abbreviation)
    )+
    geom_label(size = 2.5, alpha = 0.8)+
    cfbplotR::scale_color_cfb()+
    theme_cfb()+
    geom_vline(xintercept = 0, linetype = 'dotted')+
    geom_hline(yintercept = 0, linetype = 'dotted')+
    coord_cartesian(
      xlim = c(-0.4, 0.4),
      ylim = c(-0.4, 0.4)
    )+
    xlab("Offensive Points Added per Play")+
    ylab("Defensive Points Added per Play")+
    labs(title = paste(season, "Team Efficiency"),
         subtitle = stringr::str_wrap("Offensive and defensive efficiency estimates based on opponent adjusted predicted points per play.", 90)
    )+
    annotate(
      geom = "label",
      x = -.35,
      y = .35,
      size = 3,
      alpha = 0.8,
      label = "Bad Offense\nGood Defense"
    ) +
    annotate(
      geom = "label",
      x = .35,
      y = .35,
      size = 3,
      alpha = 0.8,
      label = "Good Offense\nGood Defense"
    ) +
    annotate(
      geom = "label",
      x = .35,
      y = -.35,
      size = 3,
      alpha = 0.8,
      label = "Good Offense\nBad Defense"
    )+
    annotate(
      geom = "label",
      x = -.35,
      y = -.35,
      size = 3,
      alpha = 0.8,
      label = "Bad Offense\nBad Defense"
    )

}

current_scores |>
  plot_team_scores()

```

## Pass/Rush

I also measure each team's efficiency based on the play type, estimating (opponent adjusted) offensive/defensive efficiency when running and passing.

The following table displays all FBS teams based on their estimated efficiency for passing/rushing on both sides of the ball.

```{r}
#| column: body-outset-right
team_category_estimates |>
  prepare_team_category_estimates() |>
  unnest(everything()) |>
  add_season_week() |>
  group_by(season, week, team) |>
  slice_tail(n = 1) |>
  ungroup() |>
  filter(season == params$season) |>
  filter(week == max(week)) |>
  arrange() |>
  arrange(desc(estimate_rush_offense)) |>
  team_category_estimates_tbl() |>
  add_gt_formatting()

```
